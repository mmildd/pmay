// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"github.com/mmildd_s/app/ent/migrate"

	"github.com/mmildd_s/app/ent/examinationroom"
	"github.com/mmildd_s/app/ent/nurse"
	"github.com/mmildd_s/app/ent/operative"
	"github.com/mmildd_s/app/ent/operativerecord"
	"github.com/mmildd_s/app/ent/tool"

	"github.com/facebookincubator/ent/dialect"
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Examinationroom is the client for interacting with the Examinationroom builders.
	Examinationroom *ExaminationroomClient
	// Nurse is the client for interacting with the Nurse builders.
	Nurse *NurseClient
	// Operative is the client for interacting with the Operative builders.
	Operative *OperativeClient
	// Operativerecord is the client for interacting with the Operativerecord builders.
	Operativerecord *OperativerecordClient
	// Tool is the client for interacting with the Tool builders.
	Tool *ToolClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Examinationroom = NewExaminationroomClient(c.config)
	c.Nurse = NewNurseClient(c.config)
	c.Operative = NewOperativeClient(c.config)
	c.Operativerecord = NewOperativerecordClient(c.config)
	c.Tool = NewToolClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: tx, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		Examinationroom: NewExaminationroomClient(cfg),
		Nurse:           NewNurseClient(cfg),
		Operative:       NewOperativeClient(cfg),
		Operativerecord: NewOperativerecordClient(cfg),
		Tool:            NewToolClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(*sql.Driver).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %v", err)
	}
	cfg := config{driver: &txDriver{tx: tx, drv: c.driver}, log: c.log, debug: c.debug, hooks: c.hooks}
	return &Tx{
		config:          cfg,
		Examinationroom: NewExaminationroomClient(cfg),
		Nurse:           NewNurseClient(cfg),
		Operative:       NewOperativeClient(cfg),
		Operativerecord: NewOperativerecordClient(cfg),
		Tool:            NewToolClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Examinationroom.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := config{driver: dialect.Debug(c.driver, c.log), log: c.log, debug: true, hooks: c.hooks}
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Examinationroom.Use(hooks...)
	c.Nurse.Use(hooks...)
	c.Operative.Use(hooks...)
	c.Operativerecord.Use(hooks...)
	c.Tool.Use(hooks...)
}

// ExaminationroomClient is a client for the Examinationroom schema.
type ExaminationroomClient struct {
	config
}

// NewExaminationroomClient returns a client for the Examinationroom from the given config.
func NewExaminationroomClient(c config) *ExaminationroomClient {
	return &ExaminationroomClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `examinationroom.Hooks(f(g(h())))`.
func (c *ExaminationroomClient) Use(hooks ...Hook) {
	c.hooks.Examinationroom = append(c.hooks.Examinationroom, hooks...)
}

// Create returns a create builder for Examinationroom.
func (c *ExaminationroomClient) Create() *ExaminationroomCreate {
	mutation := newExaminationroomMutation(c.config, OpCreate)
	return &ExaminationroomCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Examinationroom.
func (c *ExaminationroomClient) Update() *ExaminationroomUpdate {
	mutation := newExaminationroomMutation(c.config, OpUpdate)
	return &ExaminationroomUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExaminationroomClient) UpdateOne(e *Examinationroom) *ExaminationroomUpdateOne {
	mutation := newExaminationroomMutation(c.config, OpUpdateOne, withExaminationroom(e))
	return &ExaminationroomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExaminationroomClient) UpdateOneID(id int) *ExaminationroomUpdateOne {
	mutation := newExaminationroomMutation(c.config, OpUpdateOne, withExaminationroomID(id))
	return &ExaminationroomUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Examinationroom.
func (c *ExaminationroomClient) Delete() *ExaminationroomDelete {
	mutation := newExaminationroomMutation(c.config, OpDelete)
	return &ExaminationroomDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ExaminationroomClient) DeleteOne(e *Examinationroom) *ExaminationroomDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ExaminationroomClient) DeleteOneID(id int) *ExaminationroomDeleteOne {
	builder := c.Delete().Where(examinationroom.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExaminationroomDeleteOne{builder}
}

// Create returns a query builder for Examinationroom.
func (c *ExaminationroomClient) Query() *ExaminationroomQuery {
	return &ExaminationroomQuery{config: c.config}
}

// Get returns a Examinationroom entity by its id.
func (c *ExaminationroomClient) Get(ctx context.Context, id int) (*Examinationroom, error) {
	return c.Query().Where(examinationroom.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExaminationroomClient) GetX(ctx context.Context, id int) *Examinationroom {
	e, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return e
}

// QueryExaminationroomOperativerecord queries the Examinationroom_Operativerecord edge of a Examinationroom.
func (c *ExaminationroomClient) QueryExaminationroomOperativerecord(e *Examinationroom) *OperativerecordQuery {
	query := &OperativerecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(examinationroom.Table, examinationroom.FieldID, id),
			sqlgraph.To(operativerecord.Table, operativerecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, examinationroom.ExaminationroomOperativerecordTable, examinationroom.ExaminationroomOperativerecordColumn),
		)
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ExaminationroomClient) Hooks() []Hook {
	return c.hooks.Examinationroom
}

// NurseClient is a client for the Nurse schema.
type NurseClient struct {
	config
}

// NewNurseClient returns a client for the Nurse from the given config.
func NewNurseClient(c config) *NurseClient {
	return &NurseClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `nurse.Hooks(f(g(h())))`.
func (c *NurseClient) Use(hooks ...Hook) {
	c.hooks.Nurse = append(c.hooks.Nurse, hooks...)
}

// Create returns a create builder for Nurse.
func (c *NurseClient) Create() *NurseCreate {
	mutation := newNurseMutation(c.config, OpCreate)
	return &NurseCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Nurse.
func (c *NurseClient) Update() *NurseUpdate {
	mutation := newNurseMutation(c.config, OpUpdate)
	return &NurseUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NurseClient) UpdateOne(n *Nurse) *NurseUpdateOne {
	mutation := newNurseMutation(c.config, OpUpdateOne, withNurse(n))
	return &NurseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NurseClient) UpdateOneID(id int) *NurseUpdateOne {
	mutation := newNurseMutation(c.config, OpUpdateOne, withNurseID(id))
	return &NurseUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Nurse.
func (c *NurseClient) Delete() *NurseDelete {
	mutation := newNurseMutation(c.config, OpDelete)
	return &NurseDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NurseClient) DeleteOne(n *Nurse) *NurseDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NurseClient) DeleteOneID(id int) *NurseDeleteOne {
	builder := c.Delete().Where(nurse.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NurseDeleteOne{builder}
}

// Create returns a query builder for Nurse.
func (c *NurseClient) Query() *NurseQuery {
	return &NurseQuery{config: c.config}
}

// Get returns a Nurse entity by its id.
func (c *NurseClient) Get(ctx context.Context, id int) (*Nurse, error) {
	return c.Query().Where(nurse.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NurseClient) GetX(ctx context.Context, id int) *Nurse {
	n, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return n
}

// QueryNurseOperativerecord queries the Nurse_Operativerecord edge of a Nurse.
func (c *NurseClient) QueryNurseOperativerecord(n *Nurse) *OperativerecordQuery {
	query := &OperativerecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(nurse.Table, nurse.FieldID, id),
			sqlgraph.To(operativerecord.Table, operativerecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, nurse.NurseOperativerecordTable, nurse.NurseOperativerecordColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NurseClient) Hooks() []Hook {
	return c.hooks.Nurse
}

// OperativeClient is a client for the Operative schema.
type OperativeClient struct {
	config
}

// NewOperativeClient returns a client for the Operative from the given config.
func NewOperativeClient(c config) *OperativeClient {
	return &OperativeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `operative.Hooks(f(g(h())))`.
func (c *OperativeClient) Use(hooks ...Hook) {
	c.hooks.Operative = append(c.hooks.Operative, hooks...)
}

// Create returns a create builder for Operative.
func (c *OperativeClient) Create() *OperativeCreate {
	mutation := newOperativeMutation(c.config, OpCreate)
	return &OperativeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Operative.
func (c *OperativeClient) Update() *OperativeUpdate {
	mutation := newOperativeMutation(c.config, OpUpdate)
	return &OperativeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OperativeClient) UpdateOne(o *Operative) *OperativeUpdateOne {
	mutation := newOperativeMutation(c.config, OpUpdateOne, withOperative(o))
	return &OperativeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OperativeClient) UpdateOneID(id int) *OperativeUpdateOne {
	mutation := newOperativeMutation(c.config, OpUpdateOne, withOperativeID(id))
	return &OperativeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Operative.
func (c *OperativeClient) Delete() *OperativeDelete {
	mutation := newOperativeMutation(c.config, OpDelete)
	return &OperativeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OperativeClient) DeleteOne(o *Operative) *OperativeDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OperativeClient) DeleteOneID(id int) *OperativeDeleteOne {
	builder := c.Delete().Where(operative.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OperativeDeleteOne{builder}
}

// Create returns a query builder for Operative.
func (c *OperativeClient) Query() *OperativeQuery {
	return &OperativeQuery{config: c.config}
}

// Get returns a Operative entity by its id.
func (c *OperativeClient) Get(ctx context.Context, id int) (*Operative, error) {
	return c.Query().Where(operative.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OperativeClient) GetX(ctx context.Context, id int) *Operative {
	o, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return o
}

// QueryOperativeOperativerecord queries the Operative_Operativerecord edge of a Operative.
func (c *OperativeClient) QueryOperativeOperativerecord(o *Operative) *OperativerecordQuery {
	query := &OperativerecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(operative.Table, operative.FieldID, id),
			sqlgraph.To(operativerecord.Table, operativerecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, operative.OperativeOperativerecordTable, operative.OperativeOperativerecordColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OperativeClient) Hooks() []Hook {
	return c.hooks.Operative
}

// OperativerecordClient is a client for the Operativerecord schema.
type OperativerecordClient struct {
	config
}

// NewOperativerecordClient returns a client for the Operativerecord from the given config.
func NewOperativerecordClient(c config) *OperativerecordClient {
	return &OperativerecordClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `operativerecord.Hooks(f(g(h())))`.
func (c *OperativerecordClient) Use(hooks ...Hook) {
	c.hooks.Operativerecord = append(c.hooks.Operativerecord, hooks...)
}

// Create returns a create builder for Operativerecord.
func (c *OperativerecordClient) Create() *OperativerecordCreate {
	mutation := newOperativerecordMutation(c.config, OpCreate)
	return &OperativerecordCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Operativerecord.
func (c *OperativerecordClient) Update() *OperativerecordUpdate {
	mutation := newOperativerecordMutation(c.config, OpUpdate)
	return &OperativerecordUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OperativerecordClient) UpdateOne(o *Operativerecord) *OperativerecordUpdateOne {
	mutation := newOperativerecordMutation(c.config, OpUpdateOne, withOperativerecord(o))
	return &OperativerecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OperativerecordClient) UpdateOneID(id int) *OperativerecordUpdateOne {
	mutation := newOperativerecordMutation(c.config, OpUpdateOne, withOperativerecordID(id))
	return &OperativerecordUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Operativerecord.
func (c *OperativerecordClient) Delete() *OperativerecordDelete {
	mutation := newOperativerecordMutation(c.config, OpDelete)
	return &OperativerecordDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *OperativerecordClient) DeleteOne(o *Operativerecord) *OperativerecordDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *OperativerecordClient) DeleteOneID(id int) *OperativerecordDeleteOne {
	builder := c.Delete().Where(operativerecord.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OperativerecordDeleteOne{builder}
}

// Create returns a query builder for Operativerecord.
func (c *OperativerecordClient) Query() *OperativerecordQuery {
	return &OperativerecordQuery{config: c.config}
}

// Get returns a Operativerecord entity by its id.
func (c *OperativerecordClient) Get(ctx context.Context, id int) (*Operativerecord, error) {
	return c.Query().Where(operativerecord.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OperativerecordClient) GetX(ctx context.Context, id int) *Operativerecord {
	o, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return o
}

// QueryExaminationroom queries the Examinationroom edge of a Operativerecord.
func (c *OperativerecordClient) QueryExaminationroom(o *Operativerecord) *ExaminationroomQuery {
	query := &ExaminationroomQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(operativerecord.Table, operativerecord.FieldID, id),
			sqlgraph.To(examinationroom.Table, examinationroom.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, operativerecord.ExaminationroomTable, operativerecord.ExaminationroomColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNurse queries the Nurse edge of a Operativerecord.
func (c *OperativerecordClient) QueryNurse(o *Operativerecord) *NurseQuery {
	query := &NurseQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(operativerecord.Table, operativerecord.FieldID, id),
			sqlgraph.To(nurse.Table, nurse.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, operativerecord.NurseTable, operativerecord.NurseColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOperative queries the Operative edge of a Operativerecord.
func (c *OperativerecordClient) QueryOperative(o *Operativerecord) *OperativeQuery {
	query := &OperativeQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(operativerecord.Table, operativerecord.FieldID, id),
			sqlgraph.To(operative.Table, operative.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, operativerecord.OperativeTable, operativerecord.OperativeColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTool queries the Tool edge of a Operativerecord.
func (c *OperativerecordClient) QueryTool(o *Operativerecord) *ToolQuery {
	query := &ToolQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(operativerecord.Table, operativerecord.FieldID, id),
			sqlgraph.To(tool.Table, tool.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, operativerecord.ToolTable, operativerecord.ToolColumn),
		)
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OperativerecordClient) Hooks() []Hook {
	return c.hooks.Operativerecord
}

// ToolClient is a client for the Tool schema.
type ToolClient struct {
	config
}

// NewToolClient returns a client for the Tool from the given config.
func NewToolClient(c config) *ToolClient {
	return &ToolClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tool.Hooks(f(g(h())))`.
func (c *ToolClient) Use(hooks ...Hook) {
	c.hooks.Tool = append(c.hooks.Tool, hooks...)
}

// Create returns a create builder for Tool.
func (c *ToolClient) Create() *ToolCreate {
	mutation := newToolMutation(c.config, OpCreate)
	return &ToolCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Update returns an update builder for Tool.
func (c *ToolClient) Update() *ToolUpdate {
	mutation := newToolMutation(c.config, OpUpdate)
	return &ToolUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ToolClient) UpdateOne(t *Tool) *ToolUpdateOne {
	mutation := newToolMutation(c.config, OpUpdateOne, withTool(t))
	return &ToolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ToolClient) UpdateOneID(id int) *ToolUpdateOne {
	mutation := newToolMutation(c.config, OpUpdateOne, withToolID(id))
	return &ToolUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tool.
func (c *ToolClient) Delete() *ToolDelete {
	mutation := newToolMutation(c.config, OpDelete)
	return &ToolDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ToolClient) DeleteOne(t *Tool) *ToolDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ToolClient) DeleteOneID(id int) *ToolDeleteOne {
	builder := c.Delete().Where(tool.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ToolDeleteOne{builder}
}

// Create returns a query builder for Tool.
func (c *ToolClient) Query() *ToolQuery {
	return &ToolQuery{config: c.config}
}

// Get returns a Tool entity by its id.
func (c *ToolClient) Get(ctx context.Context, id int) (*Tool, error) {
	return c.Query().Where(tool.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ToolClient) GetX(ctx context.Context, id int) *Tool {
	t, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return t
}

// QueryToolOperativerecord queries the Tool_Operativerecord edge of a Tool.
func (c *ToolClient) QueryToolOperativerecord(t *Tool) *OperativerecordQuery {
	query := &OperativerecordQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tool.Table, tool.FieldID, id),
			sqlgraph.To(operativerecord.Table, operativerecord.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, tool.ToolOperativerecordTable, tool.ToolOperativerecordColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ToolClient) Hooks() []Hook {
	return c.hooks.Tool
}
