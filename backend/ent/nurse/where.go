// Code generated by entc, DO NOT EDIT.

package nurse

import (
	"github.com/facebookincubator/ent/dialect/sql"
	"github.com/facebookincubator/ent/dialect/sql/sqlgraph"
	"github.com/mmildd_s/app/ent/predicate"
)

// ID filters vertices based on their identifier.
func ID(id int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// NurseName applies equality check predicate on the "nurse_Name" field. It's identical to NurseNameEQ.
func NurseName(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNurseName), v))
	})
}

// NurseEmail applies equality check predicate on the "nurse_Email" field. It's identical to NurseEmailEQ.
func NurseEmail(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNurseEmail), v))
	})
}

// NursePassword applies equality check predicate on the "nurse_Password" field. It's identical to NursePasswordEQ.
func NursePassword(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNursePassword), v))
	})
}

// NurseTel applies equality check predicate on the "nurse_Tel" field. It's identical to NurseTelEQ.
func NurseTel(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNurseTel), v))
	})
}

// NurseNameEQ applies the EQ predicate on the "nurse_Name" field.
func NurseNameEQ(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNurseName), v))
	})
}

// NurseNameNEQ applies the NEQ predicate on the "nurse_Name" field.
func NurseNameNEQ(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNurseName), v))
	})
}

// NurseNameIn applies the In predicate on the "nurse_Name" field.
func NurseNameIn(vs ...string) predicate.Nurse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nurse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNurseName), v...))
	})
}

// NurseNameNotIn applies the NotIn predicate on the "nurse_Name" field.
func NurseNameNotIn(vs ...string) predicate.Nurse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nurse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNurseName), v...))
	})
}

// NurseNameGT applies the GT predicate on the "nurse_Name" field.
func NurseNameGT(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNurseName), v))
	})
}

// NurseNameGTE applies the GTE predicate on the "nurse_Name" field.
func NurseNameGTE(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNurseName), v))
	})
}

// NurseNameLT applies the LT predicate on the "nurse_Name" field.
func NurseNameLT(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNurseName), v))
	})
}

// NurseNameLTE applies the LTE predicate on the "nurse_Name" field.
func NurseNameLTE(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNurseName), v))
	})
}

// NurseNameContains applies the Contains predicate on the "nurse_Name" field.
func NurseNameContains(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNurseName), v))
	})
}

// NurseNameHasPrefix applies the HasPrefix predicate on the "nurse_Name" field.
func NurseNameHasPrefix(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNurseName), v))
	})
}

// NurseNameHasSuffix applies the HasSuffix predicate on the "nurse_Name" field.
func NurseNameHasSuffix(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNurseName), v))
	})
}

// NurseNameEqualFold applies the EqualFold predicate on the "nurse_Name" field.
func NurseNameEqualFold(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNurseName), v))
	})
}

// NurseNameContainsFold applies the ContainsFold predicate on the "nurse_Name" field.
func NurseNameContainsFold(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNurseName), v))
	})
}

// NurseEmailEQ applies the EQ predicate on the "nurse_Email" field.
func NurseEmailEQ(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNurseEmail), v))
	})
}

// NurseEmailNEQ applies the NEQ predicate on the "nurse_Email" field.
func NurseEmailNEQ(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNurseEmail), v))
	})
}

// NurseEmailIn applies the In predicate on the "nurse_Email" field.
func NurseEmailIn(vs ...string) predicate.Nurse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nurse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNurseEmail), v...))
	})
}

// NurseEmailNotIn applies the NotIn predicate on the "nurse_Email" field.
func NurseEmailNotIn(vs ...string) predicate.Nurse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nurse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNurseEmail), v...))
	})
}

// NurseEmailGT applies the GT predicate on the "nurse_Email" field.
func NurseEmailGT(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNurseEmail), v))
	})
}

// NurseEmailGTE applies the GTE predicate on the "nurse_Email" field.
func NurseEmailGTE(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNurseEmail), v))
	})
}

// NurseEmailLT applies the LT predicate on the "nurse_Email" field.
func NurseEmailLT(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNurseEmail), v))
	})
}

// NurseEmailLTE applies the LTE predicate on the "nurse_Email" field.
func NurseEmailLTE(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNurseEmail), v))
	})
}

// NurseEmailContains applies the Contains predicate on the "nurse_Email" field.
func NurseEmailContains(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNurseEmail), v))
	})
}

// NurseEmailHasPrefix applies the HasPrefix predicate on the "nurse_Email" field.
func NurseEmailHasPrefix(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNurseEmail), v))
	})
}

// NurseEmailHasSuffix applies the HasSuffix predicate on the "nurse_Email" field.
func NurseEmailHasSuffix(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNurseEmail), v))
	})
}

// NurseEmailEqualFold applies the EqualFold predicate on the "nurse_Email" field.
func NurseEmailEqualFold(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNurseEmail), v))
	})
}

// NurseEmailContainsFold applies the ContainsFold predicate on the "nurse_Email" field.
func NurseEmailContainsFold(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNurseEmail), v))
	})
}

// NursePasswordEQ applies the EQ predicate on the "nurse_Password" field.
func NursePasswordEQ(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNursePassword), v))
	})
}

// NursePasswordNEQ applies the NEQ predicate on the "nurse_Password" field.
func NursePasswordNEQ(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNursePassword), v))
	})
}

// NursePasswordIn applies the In predicate on the "nurse_Password" field.
func NursePasswordIn(vs ...string) predicate.Nurse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nurse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNursePassword), v...))
	})
}

// NursePasswordNotIn applies the NotIn predicate on the "nurse_Password" field.
func NursePasswordNotIn(vs ...string) predicate.Nurse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nurse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNursePassword), v...))
	})
}

// NursePasswordGT applies the GT predicate on the "nurse_Password" field.
func NursePasswordGT(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNursePassword), v))
	})
}

// NursePasswordGTE applies the GTE predicate on the "nurse_Password" field.
func NursePasswordGTE(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNursePassword), v))
	})
}

// NursePasswordLT applies the LT predicate on the "nurse_Password" field.
func NursePasswordLT(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNursePassword), v))
	})
}

// NursePasswordLTE applies the LTE predicate on the "nurse_Password" field.
func NursePasswordLTE(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNursePassword), v))
	})
}

// NursePasswordContains applies the Contains predicate on the "nurse_Password" field.
func NursePasswordContains(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNursePassword), v))
	})
}

// NursePasswordHasPrefix applies the HasPrefix predicate on the "nurse_Password" field.
func NursePasswordHasPrefix(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNursePassword), v))
	})
}

// NursePasswordHasSuffix applies the HasSuffix predicate on the "nurse_Password" field.
func NursePasswordHasSuffix(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNursePassword), v))
	})
}

// NursePasswordEqualFold applies the EqualFold predicate on the "nurse_Password" field.
func NursePasswordEqualFold(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNursePassword), v))
	})
}

// NursePasswordContainsFold applies the ContainsFold predicate on the "nurse_Password" field.
func NursePasswordContainsFold(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNursePassword), v))
	})
}

// NurseTelEQ applies the EQ predicate on the "nurse_Tel" field.
func NurseTelEQ(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNurseTel), v))
	})
}

// NurseTelNEQ applies the NEQ predicate on the "nurse_Tel" field.
func NurseTelNEQ(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNurseTel), v))
	})
}

// NurseTelIn applies the In predicate on the "nurse_Tel" field.
func NurseTelIn(vs ...string) predicate.Nurse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nurse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNurseTel), v...))
	})
}

// NurseTelNotIn applies the NotIn predicate on the "nurse_Tel" field.
func NurseTelNotIn(vs ...string) predicate.Nurse {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nurse(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNurseTel), v...))
	})
}

// NurseTelGT applies the GT predicate on the "nurse_Tel" field.
func NurseTelGT(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNurseTel), v))
	})
}

// NurseTelGTE applies the GTE predicate on the "nurse_Tel" field.
func NurseTelGTE(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNurseTel), v))
	})
}

// NurseTelLT applies the LT predicate on the "nurse_Tel" field.
func NurseTelLT(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNurseTel), v))
	})
}

// NurseTelLTE applies the LTE predicate on the "nurse_Tel" field.
func NurseTelLTE(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNurseTel), v))
	})
}

// NurseTelContains applies the Contains predicate on the "nurse_Tel" field.
func NurseTelContains(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNurseTel), v))
	})
}

// NurseTelHasPrefix applies the HasPrefix predicate on the "nurse_Tel" field.
func NurseTelHasPrefix(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNurseTel), v))
	})
}

// NurseTelHasSuffix applies the HasSuffix predicate on the "nurse_Tel" field.
func NurseTelHasSuffix(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNurseTel), v))
	})
}

// NurseTelEqualFold applies the EqualFold predicate on the "nurse_Tel" field.
func NurseTelEqualFold(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNurseTel), v))
	})
}

// NurseTelContainsFold applies the ContainsFold predicate on the "nurse_Tel" field.
func NurseTelContainsFold(v string) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNurseTel), v))
	})
}

// HasNurseOperativerecord applies the HasEdge predicate on the "Nurse_Operativerecord" edge.
func HasNurseOperativerecord() predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NurseOperativerecordTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NurseOperativerecordTable, NurseOperativerecordColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasNurseOperativerecordWith applies the HasEdge predicate on the "Nurse_Operativerecord" edge with a given conditions (other predicates).
func HasNurseOperativerecordWith(preds ...predicate.Operativerecord) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(NurseOperativerecordInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, NurseOperativerecordTable, NurseOperativerecordColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups list of predicates with the AND operator between them.
func And(predicates ...predicate.Nurse) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups list of predicates with the OR operator between them.
func Or(predicates ...predicate.Nurse) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Nurse) predicate.Nurse {
	return predicate.Nurse(func(s *sql.Selector) {
		p(s.Not())
	})
}
